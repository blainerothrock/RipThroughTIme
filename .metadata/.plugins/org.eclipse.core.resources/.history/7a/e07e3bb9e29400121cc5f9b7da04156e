package com.rip.levels;

import java.util.ArrayList;
import java.util.Random;

import renderers.LevelRenderer1_2;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.audio.Music;
import com.badlogic.gdx.graphics.Pixmap;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.utils.Array;
import com.rip.RipGame;
import com.rip.objects.BackgroundObject;
import com.rip.objects.Enemy;
import com.rip.objects.Player;

public class Level_1_2 extends Level {
	
	public RipGame game;
	Player player;
	LevelRenderer1_2 lr;
	ArrayList<Enemy> enemies;
	private InputHandler in;
	
	Random r = new Random();
	
	public int levelLength = 1400;
	
	
	Array<BackgroundObject> bgBack = new Array<BackgroundObject>(100);
	Array<BackgroundObject> bgFront = new Array<BackgroundObject>(100);
	Array<BackgroundObject> bgMiddle = new Array<BackgroundObject>(100);
	Array<BackgroundObject> foreground = new Array<BackgroundObject>(100);
	Array<BackgroundObject> groundRocks = new Array<BackgroundObject>(100);
	Array<BackgroundObject> rocks = new Array<BackgroundObject>(100);
	Array<BackgroundObject> smallRocks = new Array<BackgroundObject>(100);
	
	
	public Level_1_2(RipGame game) {
		super(game);
		enemies = new ArrayList<Enemy>();
		this.player = new Player(250, 158);
		setIn(new InputHandler(this));
		Gdx.input.setInputProcessor(getIn());
	}
	
	@Override
	public ArrayList<Enemy> getEnemies() {
		return enemies;
	}

	
	public void setEnemies(ArrayList<Enemy> enemies) {
		this.enemies = enemies;
	}


	public Player getPlayer(){
		return player;
	}
	
	public void update() {
		player.update();
	}

	public void setRenderer(LevelRenderer1_2 lr) {
		this.lr = lr;
	}
	
//	public LevelRenderer1_2 getRenderer() {
//		return lr;
//	}
	
	public void dispose() {
		
	}


//	public Music getLeveltheme() {
//		return leveltheme;
//	}

	public InputHandler getIn() {
		return in;
	}

	public void setIn(InputHandler in) {
		this.in = in;
	}

	public void generateBackground() {
		//////////background textures//////////
		Pixmap fg1 = new Pixmap(Gdx.files.internal("level1_2/foreground1.png"));
		Pixmap fg2 = new Pixmap(Gdx.files.internal("level1_2/foreground2.png"));
		Pixmap fg3 = new Pixmap(Gdx.files.internal("level1_2/foreground3.png"));
		Pixmap fg4 = new Pixmap(Gdx.files.internal("level1_2/foreground4.png"));
		Array<Pixmap> fgPix = new Array<Pixmap>();
		fgPix.add(fg1);
		fgPix.add(fg2);
		fgPix.add(fg3);
		fgPix.add(fg4);
		int ranPos = -100;
		while (ranPos < levelLength * (1-(.5/3))) {
			int randomX = -20;
			int randomY = 0;
			BackgroundObject fg = new BackgroundObject(fgPix, ranPos, randomY);
			fg.setTexture();
			foreground.add(fg);
			ranPos += fg1.getWidth();
		}
		
	
		//furthest back background
		Pixmap bgBack1 = new Pixmap(Gdx.files.internal("level1_2/back1.png"));
		Pixmap bgBack2 = new Pixmap(Gdx.files.internal("level1_2/back2.png"));
		Pixmap bgBack3 = new Pixmap(Gdx.files.internal("level1_2/back3.png"));
		Pixmap bgBack4 = new Pixmap(Gdx.files.internal("level1_2/back4.png"));
		Array<Pixmap> bgBackPix = new Array<Pixmap>();
		bgBackPix.add(bgBack1);
		bgBackPix.add(bgBack2);
		bgBackPix.add(bgBack3);
		bgBackPix.add(bgBack4);
		ranPos = -100;
		while (ranPos < levelLength * (1-(.5/3))) {
			int randomX = -20;
			int randomY = 340;
			BackgroundObject bgB = new BackgroundObject(bgBackPix, ranPos, randomY);
			bgB.setTexture();
			bgBack.add(bgB);
			ranPos += bgBack1.getWidth();
		}
		
		//middle background
		Pixmap bgMiddle1 = new Pixmap(Gdx.files.internal("level1_2/middle1.png"));
		Pixmap bgMiddle2 = new Pixmap(Gdx.files.internal("level1_2/middle2.png"));
		Pixmap bgMiddle3 = new Pixmap(Gdx.files.internal("level1_2/middle3.png"));
		Pixmap bgMiddle4 = new Pixmap(Gdx.files.internal("level1_2/middle4.png"));
		Array<Pixmap> bgMiddlePix = new Array<Pixmap>();
		bgMiddlePix.add(bgMiddle1);
		bgMiddlePix.add(bgMiddle2);
		bgMiddlePix.add(bgMiddle3);
		bgMiddlePix.add(bgMiddle4);
		ranPos = -100;
		while (ranPos < levelLength * (1-(.5/3))) {
			int randomX = -20;
			int randomY = 380;
			ranPos += bgMiddle1.getWidth();
			BackgroundObject bgM = new BackgroundObject(bgMiddlePix, ranPos, randomY);
			bgM.setTexture();
			bgMiddle.add(bgM);
		}
		
		///closest back background object
		Pixmap bgFront1 = new Pixmap(Gdx.files.internal("level1_2/front1.png"));
		Pixmap bgFront2 = new Pixmap(Gdx.files.internal("level1_2/front2.png"));
		Pixmap bgFront3 = new Pixmap(Gdx.files.internal("level1_2/front3.png"));
		Pixmap bgFront4 = new Pixmap(Gdx.files.internal("level1_2/front4.png"));
		Array<Pixmap> bgFrontPix = new Array<Pixmap>();
		bgFrontPix.add(bgFront1);
		bgFrontPix.add(bgFront2);
		bgFrontPix.add(bgFront3);
		bgFrontPix.add(bgFront4);
		ranPos = -100;
		while (ranPos < levelLength * (1-(.5/3))) {
			int randomX = -20;
			int randomY = 420;
			ranPos += bgFront1.getWidth();
			BackgroundObject bgF = new BackgroundObject(bgFrontPix, ranPos, randomY);
			bgF.setTexture();
			bgFront.add(bgF);
		}
		
		Pixmap groundRock1 = new Pixmap(Gdx.files.internal("level1_2/ground1_1.png"));
		Pixmap groundRock2 = new Pixmap(Gdx.files.internal("level1_2/ground1_2.png"));
		Pixmap groundRock3 = new Pixmap(Gdx.files.internal("level1_2/ground1_3.png"));
		Pixmap groundRock4 = new Pixmap(Gdx.files.internal("level1_2/ground2_1.png"));
		Pixmap groundRock5 = new Pixmap(Gdx.files.internal("level1_2/ground2_2.png"));
		Pixmap groundRock6 = new Pixmap(Gdx.files.internal("level1_2/ground2_3.png"));
		Pixmap groundRock7 = new Pixmap(Gdx.files.internal("level1_2/ground2_4.png"));
		Pixmap groundRock8 = new Pixmap(Gdx.files.internal("level1_2/ground2_5.png"));
		Array<Pixmap> groundRockPix = new Array<Pixmap>();
		groundRockPix.add(groundRock1);
		groundRockPix.add(groundRock2);
		groundRockPix.add(groundRock3);
		groundRockPix.add(groundRock4);
		groundRockPix.add(groundRock5);
		groundRockPix.add(groundRock6);
		groundRockPix.add(groundRock7);
		groundRockPix.add(groundRock8);
		ranPos = -100;
		while (ranPos < levelLength * (1-(.5/3))) {
			int randomX = r.nextInt(175-50) + 50;
			int randomY = r.nextInt(220 - 200) + 200;
			ranPos += randomX;
			BackgroundObject gR = new BackgroundObject(groundRockPix, ranPos, randomY);
			gR.setTexture();
			groundRocks.add(gR);
		}
		
		Pixmap rock1 = new Pixmap(Gdx.files.internal("level1_2/paint1.png"));
		Pixmap rock2 = new Pixmap(Gdx.files.internal("level1_2/paint2.png"));
		Pixmap rock3 = new Pixmap(Gdx.files.internal("level1_2/paint3.png"));
		Pixmap rock4 = new Pixmap(Gdx.files.internal("level1_2/paint4.png"));
		Pixmap rock5 = new Pixmap(Gdx.files.internal("level1_2/paint5.png"));
		Pixmap rock6 = new Pixmap(Gdx.files.internal("level1_2/paint6.png"));
		Pixmap rock7 = new Pixmap(Gdx.files.internal("level1_2/paint7.png"));
		Pixmap rock8 = new Pixmap(Gdx.files.internal("level1_2/paint8.png"));
		Pixmap rock9 = new Pixmap(Gdx.files.internal("level1_2/paint9.png"));
		Pixmap rock10 = new Pixmap(Gdx.files.internal("level1_2/rock1.png"));
		Pixmap rock11 = new Pixmap(Gdx.files.internal("level1_2/rock2.png"));
		Pixmap rock12 = new Pixmap(Gdx.files.internal("level1_2/rock3.png"));
		Pixmap rock13 = new Pixmap(Gdx.files.internal("level1_2/rock4.png"));
		Pixmap rock14 = new Pixmap(Gdx.files.internal("level1_2/rock5.png"));
		Pixmap rock15 = new Pixmap(Gdx.files.internal("level1_2/rock6.png"));
		Pixmap rock16 = new Pixmap(Gdx.files.internal("level1_2/rock7.png"));
		Array<Pixmap> rocksPix = new Array<Pixmap>();
		rocksPix.add(rock1);
		rocksPix.add(rock2);
		rocksPix.add(rock3);
		rocksPix.add(rock4);
		rocksPix.add(rock5);
		rocksPix.add(rock6);
		rocksPix.add(rock7);
		rocksPix.add(rock8);
		rocksPix.add(rock9);
		rocksPix.add(rock10);
		rocksPix.add(rock11);
		rocksPix.add(rock12);
		rocksPix.add(rock13);
		rocksPix.add(rock14);
		rocksPix.add(rock15);
		rocksPix.add(rock16);
		ranPos = -100;
		while (ranPos < levelLength) {
			int randomX = r.nextInt(250-150) + 150;
			int randomY = r.nextInt(220 - 200) + 200;
			ranPos += randomX;
			BackgroundObject rR = new BackgroundObject(rocksPix, ranPos, randomY);
			rR.setTexture();
			rocks.add(rR);
		}
		
		Pixmap smallRock1 = new Pixmap(Gdx.files.internal("level1_2/rocksmall1.png"));
		Pixmap smallRock2 = new Pixmap(Gdx.files.internal("level1_2/rocksmall2.png"));
		Pixmap smallRock3 = new Pixmap(Gdx.files.internal("level1_2/rocksmall3.png"));
		Pixmap smallRock4 = new Pixmap(Gdx.files.internal("level1_2/rocksmall4.png"));
		Pixmap smallRock5 = new Pixmap(Gdx.files.internal("level1_2/rocksmall5.png"));
		Array<Pixmap> smallRockPix = new Array<Pixmap>();
		smallRockPix.add(smallRock1);
		smallRockPix.add(smallRock2);
		smallRockPix.add(smallRock3);
		smallRockPix.add(smallRock4);
		smallRockPix.add(smallRock5);
		ranPos = -100;
		while (ranPos < levelLength) {
			int randomX = r.nextInt(100-25) + 25;
			int randomY = r.nextInt(220 - 200) + 200;
			ranPos += randomX;
			BackgroundObject sR = new BackgroundObject(smallRockPix, ranPos, randomY);
			sR.setTexture();
			smallRocks.add(sR);
		}
		
		
		
	}

	public void drawBackground(SpriteBatch batch) {
		
		
		
		for (BackgroundObject i : bgBack) {
			if (i.getX() > LevelRenderer1_2.camPos - 250 && i.getX() < LevelRenderer1_2.camPos + RipGame.WIDTH + 20) {
				batch.draw(i.getTexture(), i.getX(), i.getY());
			}
		}
		
		for (BackgroundObject i : bgMiddle) {
			if (i.getX() > LevelRenderer1_2.camPos - 250 && i.getX() < LevelRenderer1_2.camPos + RipGame.WIDTH + 20) {
				batch.draw(i.getTexture(), i.getX(), i.getY());
			}
		}
		
		for (BackgroundObject i : bgFront) {
			if (i.getX() > LevelRenderer1_2.camPos - 250 && i.getX() < LevelRenderer1_2.camPos + RipGame.WIDTH + 20) {
				batch.draw(i.getTexture(), i.getX(), i.getY());
			}
		}
		
		for (BackgroundObject i : groundRocks) {
			if (i.getX() > LevelRenderer1_2.camPos - 250 && i.getX() < LevelRenderer1_2.camPos + RipGame.WIDTH + 20) {
				batch.draw(i.getTexture(), i.getX(), i.getY());
			}
		}
		
		for (BackgroundObject i : foreground) {
			if (i.getX() > LevelRenderer1_2.camPos - 250 && i.getX() < LevelRenderer1_2.camPos + RipGame.WIDTH + 20) {
				batch.draw(i.getTexture(), i.getX(), i.getY());
			}
		}
		
		for (BackgroundObject i : rocks) {
			if (i.getX() > LevelRenderer1_2.camPos - 250 && i.getX() < LevelRenderer1_2.camPos + RipGame.WIDTH + 20) {
				batch.draw(i.getTexture(), i.getX(), i.getY());
			}
		}
		
		for (BackgroundObject i : smallRocks) {
			if (i.getX() > LevelRenderer1_2.camPos - 250 && i.getX() < LevelRenderer1_2.camPos + RipGame.WIDTH + 20) {
				batch.draw(i.getTexture(), i.getX(), i.getY());
			}
		}
		
	}
	
	public void parallax() {
		
	}
	
}

